name: Build

on:
  push:
    branches:
      - production
      - development
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build-backend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        stages:
          - stage: development
            shouldRelease: ${{ contains(github.ref, 'development') }}
          - stage: production
            shouldRelease: ${{ contains(github.ref, 'production') }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Build image
      if: ${{ matrix.stages.shouldRelease }}
      uses: whoan/docker-build-with-cache-action@v5
      with:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        image_name: bws-backend-${{ matrix.stages.stage }}
        registry: docker.pkg.github.com
        image_tag: latest
        context: ./
        dockerfile: "./backend/Dockerfile.${{ matrix.stages.stage }}"

  build-frontend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        stages:
          - stage: development
            shouldRelease: ${{ contains(github.ref, 'development') }}
          - stage: production
            shouldRelease: ${{ contains(github.ref, 'production') }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Build image
      if: ${{ matrix.stages.shouldRelease }}
      uses: whoan/docker-build-with-cache-action@v5
      with:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        image_name: bws-frontend-${{ matrix.stages.stage }}
        registry: docker.pkg.github.com
        image_tag: latest
        context: ./
        dockerfile: "./frontend/Dockerfile.${{ matrix.stages.stage }}"
        build_extra_args: "--build-arg=NGINX_CONFIG_NAME=nginx.development.conf"

  deploy:
    needs: [build-backend, build-frontend]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        stages:
          - stage: development
            shouldRelease: ${{ contains(github.ref, 'development') }}
            DEPLOYMENT_HOST: DEVELOPMENT_DEPLOYMENT_HOST
            DEPLOYMENT_USERNAME: DEVELOPMENT_DEPLOYMENT_USERNAME
            DEPLOYMENT_SSH_KEY: DEVELOPMENT_DEPLOYMENT_SSH_KEY
          # - stage: production
          #   shouldRelease: ${{ contains(github.ref, 'production') }}
          #   DEPLOYMENT_HOST: PRODUCTION_DEPLOYMENT_HOST
          #   DEPLOYMENT_USERNAME: PRODUCTION_DEPLOYMENT_USERNAME
          #   DEPLOYMENT_PASSWORD: PRODUCTION_DEPLOYMENT_PASSWORD
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Copy docker-compose.yml to deployment server
      if: ${{ matrix.stages.shouldRelease }}
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets[matrix.stages.DEPLOYMENT_HOST] }}
        username: ${{ secrets[matrix.stages.DEPLOYMENT_USERNAME] }}
        key: ${{ secrets[matrix.stages.DEPLOYMENT_SSH_KEY] }}
        source: ".docker/bws/docker-compose.${{ matrix.stages.stage }}.yml"
        target: "app"

    - name: Run docker-compose.yml on deployment server
      if: ${{ matrix.stages.shouldRelease }}
      uses: appleboy/ssh-action@master
      env:
          GITHUB_USERNAME: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        host: ${{ secrets[matrix.stages.DEPLOYMENT_HOST] }}
        username: ${{ secrets[matrix.stages.DEPLOYMENT_USERNAME] }}
        key: ${{ secrets[matrix.stages.DEPLOYMENT_SSH_KEY] }}
        envs: GITHUB_USERNAME,GITHUB_TOKEN
        script: |
          export GITHUB_USERNAME=$GITHUB_USERNAME
          export GITHUB_TOKEN=$GITHUB_TOKEN
          echo "$GITHUB_TOKEN" | docker login docker.pkg.github.com -u $GITHUB_USERNAME -p $GITHUB_TOKEN
          cd app/.docker/bws
          docker-compose -f docker-compose.${{ matrix.stages.stage }}.yml pull
          docker-compose -f docker-compose.${{ matrix.stages.stage }}.yml stop
          docker-compose -f docker-compose.${{ matrix.stages.stage }}.yml up -d --build

  # notify:
  #   needs: deploy
  #   runs-on: ubuntu-latest
  #   if: always()
  #   steps:
  #     - name: Trigger this job at the end of workflow
  #       uses: technote-space/workflow-conclusion-action@v2

  #     - name: Slack Notification
  #       if: always()
  #       uses: rtCamp/action-slack-notify@v2.2.0
  #       env:
  #         SLACK_USERNAME: Deployment
  #         SLACK_TITLE: Status
  #         # WORKFLOW_CONCLUSION: neutral, success, skipped, cancelled, timed_out, action_required, failure
  #         SLACK_MESSAGE: "Deployment is ${{ env.WORKFLOW_CONCLUSION == 'success' && 'Success ðŸŸ¢' || env.WORKFLOW_CONCLUSION == 'cancelled' && 'Cancelled ðŸŸ¡' || env.WORKFLOW_CONCLUSION == 'skipped' && 'Skipped ðŸ”µ' || 'Error ðŸ”´' }}"
  #         SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
